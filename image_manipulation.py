# -*- coding: utf-8 -*-
"""Course Project 1 - Image Manipulation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EvHWmmLAjB4weuZbKVTGRPceHScUq0Lz
"""

### You will likely need these libraries
import os
import PIL
import matplotlib.pyplot as plt

directory = "/content" # identfying the location of the image
name = "0.png" # identfying the name of the image

filepath = os.path.join(directory, name) # using the os library to create a path to the image regardless of the operating system used

img = PIL.Image.open(filepath) # use PIL to open the image

img = img.convert('L') # converting the image to grayscale

plt.imshow(img, cmap='gray', vmin=0, vmax=255) # using matplot to plot the grayscale image

# importing numpy to convert our image into a numerical array
import numpy as np

# Converting the image to a Numpy array
img_array = np.asarray(img)

# Viewing the array as an image
plt.imshow(img_array, cmap='gray', vmin=0, vmax=255)

### View details about the array: print the shape, entire array, first row, and first column
# Note that Python may leave out some values when printing the entire array.
# Make sure that the first row and first column look correct!

# >>> ENTER YOUR CODE HERE <<<
shape = img_array.shape
array = img_array
first_row = img_array[0,:]
first_column = img_array[:,0]

print('Shape:', shape)
print('Array:', array)
print('First Row:', first_row)
print('First Column:', first_column)

# Using the Scikit-Image Transform module to help resize the image
from skimage.transform import resize

### Use the "resize" function to resize your image array to 28x28 pixels.
# I recommend setting the "anti_aliasing" parameter to True.
# Print the array's shape when you are done (it should be (28, 28))

# Save your resized image in the 'img_resized' variable

# >>> ENTER YOUR CODE HERE <<<
height = 28
width = 28

img_resized =  resize(img_array, (height, width), anti_aliasing = True)

print('New array shape:', img_resized.shape)

### View the new array as an image (this should look all black--that's OK!)

# At this point, your resized image should be saved in the 'img_resized' variable
plt.imshow(img_resized, cmap='gray', vmin=0, vmax=255)

### Convert the normalized 0.0 to 1.0 values in your image to 0 to 255 integers
# Save this 8-bit array back into the 'img_resized' variable
# Round or truncate all elements to integer values (no floating point decimals)
# Make sure all elements are between 0 and 255 (known as "clamping")

# >>> ENTER YOUR CODE HERE <<<
img_resized = img_resized*255 # normalizing values in the image to values between 0 and 255
img_resized = np.rint(img_resized) # rounding all elements
img_resized = img_resized.astype(int) # Converting all elements to integers
img_resized = np.clip(img_resized, 0, 255) # Clamping values to 0 and 255

### Let's try drawing the image again

# At this point, your resized image should be saved in the 'img_resized' variable
plt.imshow(img_resized, cmap='gray', vmin=0, vmax=255) # will result in a more pixelated image as it is smaller now

### Change the required elements in the Numpy array so that a 10x10 white square is drawn in the
# middle. Try to avoid using for loops if possible.

# Start with your resized image
img_with_box = np.copy(img_resized)

# >>> ENTER YOUR CODE HERE <<<

# Shape of box
box_h = 10
box_w = 10

# Get the height and width of the image
img_h = img_with_box.shape[0]
img_w = img_with_box.shape[1]

# Find coordinates of first line
x0 = int((img_w / 2) - (box_w / 2))
x1 = int((img_w / 2) + (box_w / 2))
y0 = int((img_h / 2) - (box_h / 2))

# Change slice of image array elements to 255
img_with_box[y0, x0:x1] = 255

# Find coordinates of second line
x0 = int((img_w / 2) - (box_w / 2))
x1 = int((img_w / 2) + (box_w / 2))
y0 = int((img_h / 2) + (box_h / 2))

# Change slice of image array elements to 255
img_with_box[y0, x0:x1] = 255

# Find coordinates of third line
x0 = int((img_w / 2) - (box_w / 2))
y0 = int((img_h / 2) - (box_h / 2))
y1 = int((img_h / 2) + (box_h / 2))

# Change slice of image array elements to 255
img_with_box[y0:y1, x0] = 255

# Find coordinates of fourth line
x0 = int((img_w / 2) + (box_w / 2))
y0 = int((img_h / 2) - (box_h / 2))
y1 = int((img_h / 2) + (box_h / 2) + 1) # Last index is non-inclusive, so we need to add +1 here

# Change slice of image array elements to 255
img_with_box[y0:y1, x0] = 255

### Draw the image--you should see a white squre in the middle!

# Your image should be saved in the 'img_with_square
plt.imshow(img_with_box, cmap='gray', vmin=0, vmax=255)